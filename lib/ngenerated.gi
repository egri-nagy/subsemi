################################################################################
##
## SubSemi
##
## Enumerating subsemigroups by minimal generating sets. TODO obsolete?
##
## Copyright (C) 2013-2015  Attila Egri-Nagy
##

# collects all the distinct semigroups generated by n-tuples
# returns an n-generating set for each, not necessarily minimal
NSubsets := function(mt,n)
  local ntuple, db, counter, size;
  counter := 1;
  db := []; # improve this storage
  size := Binomial(Size(Indices(mt)),n);
  Info(SubSemiInfoClass,1,FormattedBigNumberString(size)," subsets of size ",n);
  for ntuple in IteratorOfCombinations(Indices(mt),n) do
    AddSet(db,ConjugacyClassRep(ntuple,mt));
    if InfoLevel(SubSemiInfoClass)>0
       and (counter mod SubSemiOptions.LOGFREQ)=0 then
      Print("#", FormattedBigNumberString(counter)," ",
            FormattedPercentageString(counter, size),
            " ",Size(db),"\n");
    fi;
    counter := counter + 1;
  od;
  Info(SubSemiInfoClass,1,Size(db), " rep sets ");
  return db;
end;
MakeReadOnlyGlobal("NSubsets");

# collects all the distinct semigroups generated by n-tuples
# returns an n-generating set for each, not necessarily minimal
NGeneratedSubSgps := function(mt,n)
  return Set(NSubsets(mt,n),
             x->BlistList(Indices(mt),ConjugacyClassRep(SgpInMulTab(x,mt),mt)));
end;
MakeReadOnlyGlobal("NGeneratedSubSgps");

#put the first n layers together, and find the layers
InstallGlobalFunction(SubSgpsByMinimalGenSets,
function(mt,n)
  local layers,i, allsgps;
  layers := [];
  allsgps := [];
  i := 1;
  repeat
    Add(layers, Difference(AsSortedList(NGeneratedSubSgps(mt,i)), allsgps));
    allsgps := Union(allsgps, layers[i]);
    Info(SubSemiInfoClass,1, String(Size(layers[i])), " sgps\n");
    i := i+1;
  until (Size(layers[i-1]) = 0) or (i > n);
  return layers;
end);
