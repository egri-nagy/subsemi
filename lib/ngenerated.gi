# collects all the distinct semigroups generated by n-tuples
# returns an n-generating set for each, not necessarily minimal
NGeneratedSubSgpGenSets := function(mt,n)
  local ntuple, db, gensets, rep;
  db := HeavyBlistContainer();
  gensets := [];
  for ntuple in IteratorOfCombinations(Indices(mt),n) do
    rep := ConjugacyClassRep(SgpInMulTab(BlistList(Indices(mt),ntuple),mt),mt);
    if not (rep in db) then
      AddSet(db,rep);
      Add(gensets, ntuple);
    fi;
  od;
  return gensets;
end;

# collects all the distinct semigroups generated by n-tuples
# returns an n-generating set for each, not necessarily minimal
NGeneratedSubSgps := function(mt,n)
  local ntuple, db;
  db := HeavyBlistContainer();
  for ntuple in IteratorOfCombinations(Indices(mt),n) do
    AddSet(db,ConjugacyClassRep(SgpInMulTab(BlistList(Indices(mt),ntuple),mt),mt));
  od;
  return AsList(db);
end;

#put the first n layers together, and find the layers
InstallGlobalFunction(SubSgpsByMinimalGenSets,
function(mt)
  local layers,i;
  layers := [AsSortedList(NGeneratedSubSgps(mt,1))];
  i := 1;
  Info(SubSemiInfoClass,1,String(i), " generators ", String(Size(layers[i])), " sgps");
  while Size(layers[i]) > 0 do
    i := i+1;
    Add(layers, Difference(AsSortedList(NGeneratedSubSgps(mt,i)), Union(layers)));
    Info(SubSemiInfoClass,1,String(i), " generators ", String(Size(layers[i])), " sgps");
  od;
  return layers;
end);
